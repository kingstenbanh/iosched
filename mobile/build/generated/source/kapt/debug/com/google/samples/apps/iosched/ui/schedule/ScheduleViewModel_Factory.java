// Generated by Dagger (https://google.github.io/dagger).
package com.google.samples.apps.iosched.ui.schedule;

import com.google.samples.apps.iosched.shared.domain.agenda.LoadAgendaUseCase;
import com.google.samples.apps.iosched.shared.domain.sessions.LoadSessionsByDayUseCase;
import com.google.samples.apps.iosched.shared.domain.sessions.LoadTagsByCategoryUseCase;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class ScheduleViewModel_Factory implements Factory<ScheduleViewModel> {
  private final Provider<LoadSessionsByDayUseCase> loadSessionsByDayUseCaseProvider;

  private final Provider<LoadAgendaUseCase> loadAgendaUseCaseProvider;

  private final Provider<LoadTagsByCategoryUseCase> loadTagsByCategoryUseCaseProvider;

  public ScheduleViewModel_Factory(
      Provider<LoadSessionsByDayUseCase> loadSessionsByDayUseCaseProvider,
      Provider<LoadAgendaUseCase> loadAgendaUseCaseProvider,
      Provider<LoadTagsByCategoryUseCase> loadTagsByCategoryUseCaseProvider) {
    this.loadSessionsByDayUseCaseProvider = loadSessionsByDayUseCaseProvider;
    this.loadAgendaUseCaseProvider = loadAgendaUseCaseProvider;
    this.loadTagsByCategoryUseCaseProvider = loadTagsByCategoryUseCaseProvider;
  }

  @Override
  public ScheduleViewModel get() {
    return new ScheduleViewModel(
        loadSessionsByDayUseCaseProvider.get(),
        loadAgendaUseCaseProvider.get(),
        loadTagsByCategoryUseCaseProvider.get());
  }

  public static ScheduleViewModel_Factory create(
      Provider<LoadSessionsByDayUseCase> loadSessionsByDayUseCaseProvider,
      Provider<LoadAgendaUseCase> loadAgendaUseCaseProvider,
      Provider<LoadTagsByCategoryUseCase> loadTagsByCategoryUseCaseProvider) {
    return new ScheduleViewModel_Factory(
        loadSessionsByDayUseCaseProvider,
        loadAgendaUseCaseProvider,
        loadTagsByCategoryUseCaseProvider);
  }
}
