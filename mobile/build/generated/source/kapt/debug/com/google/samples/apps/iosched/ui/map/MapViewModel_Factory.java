// Generated by Dagger (https://google.github.io/dagger).
package com.google.samples.apps.iosched.ui.map;

import com.google.samples.apps.iosched.shared.domain.map.LoadConferenceLocationUseCase;
import com.google.samples.apps.iosched.shared.domain.map.LoadConferenceMinZoomUseCase;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class MapViewModel_Factory implements Factory<MapViewModel> {
  private final Provider<LoadConferenceLocationUseCase> loadConferenceLocationUseCaseProvider;

  private final Provider<LoadConferenceMinZoomUseCase> loadConferenceMinZoomUseCaseProvider;

  public MapViewModel_Factory(
      Provider<LoadConferenceLocationUseCase> loadConferenceLocationUseCaseProvider,
      Provider<LoadConferenceMinZoomUseCase> loadConferenceMinZoomUseCaseProvider) {
    this.loadConferenceLocationUseCaseProvider = loadConferenceLocationUseCaseProvider;
    this.loadConferenceMinZoomUseCaseProvider = loadConferenceMinZoomUseCaseProvider;
  }

  @Override
  public MapViewModel get() {
    return new MapViewModel(
        loadConferenceLocationUseCaseProvider.get(), loadConferenceMinZoomUseCaseProvider.get());
  }

  public static MapViewModel_Factory create(
      Provider<LoadConferenceLocationUseCase> loadConferenceLocationUseCaseProvider,
      Provider<LoadConferenceMinZoomUseCase> loadConferenceMinZoomUseCaseProvider) {
    return new MapViewModel_Factory(
        loadConferenceLocationUseCaseProvider, loadConferenceMinZoomUseCaseProvider);
  }
}
