// Generated by Dagger (https://google.github.io/dagger).
package com.google.samples.apps.iosched.di;

import android.app.Activity;
import android.app.Fragment;
import android.app.Service;
import android.arch.lifecycle.ViewModel;
import android.content.BroadcastReceiver;
import android.content.ContentProvider;
import com.google.samples.apps.iosched.MainApplication;
import com.google.samples.apps.iosched.shared.data.map.MapMetadataDataSource;
import com.google.samples.apps.iosched.shared.data.map.MapMetadataRepository;
import com.google.samples.apps.iosched.shared.data.map.MapMetadataRepository_Factory;
import com.google.samples.apps.iosched.shared.data.session.SessionDataSource;
import com.google.samples.apps.iosched.shared.data.session.SessionRepository;
import com.google.samples.apps.iosched.shared.data.session.SessionRepository_Factory;
import com.google.samples.apps.iosched.shared.data.session.agenda.AgendaDataSource;
import com.google.samples.apps.iosched.shared.data.session.agenda.AgendaRepository;
import com.google.samples.apps.iosched.shared.data.session.agenda.AgendaRepository_Factory;
import com.google.samples.apps.iosched.shared.data.tag.TagDataSource;
import com.google.samples.apps.iosched.shared.data.tag.TagRepository;
import com.google.samples.apps.iosched.shared.data.tag.TagRepository_Factory;
import com.google.samples.apps.iosched.shared.di.SharedModule;
import com.google.samples.apps.iosched.shared.di.SharedModule_ProvideAgendaDataSourceFactory;
import com.google.samples.apps.iosched.shared.di.SharedModule_ProvideMapMetadataDataSourceFactory;
import com.google.samples.apps.iosched.shared.di.SharedModule_ProvideSessionDataSourceFactory;
import com.google.samples.apps.iosched.shared.di.SharedModule_ProvideTagDataSourceFactory;
import com.google.samples.apps.iosched.shared.domain.agenda.LoadAgendaUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.map.LoadConferenceLocationUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.map.LoadConferenceMinZoomUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.sessions.LoadSessionUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.sessions.LoadSessionsByDayUseCase_Factory;
import com.google.samples.apps.iosched.shared.domain.sessions.LoadTagsByCategoryUseCase_Factory;
import com.google.samples.apps.iosched.ui.MainActivity;
import com.google.samples.apps.iosched.ui.MainModule_MainActivity$mobile_debug;
import com.google.samples.apps.iosched.ui.info.EventFragment;
import com.google.samples.apps.iosched.ui.info.FaqFragment;
import com.google.samples.apps.iosched.ui.info.InfoFragment;
import com.google.samples.apps.iosched.ui.info.InfoModule_ContributeEventFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.info.InfoModule_ContributeFaqFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.info.InfoModule_ContributeInfoFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.info.InfoModule_ContributeSettingsFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.info.InfoModule_ContributeTravelFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.info.SettingsFragment;
import com.google.samples.apps.iosched.ui.info.TravelFragment;
import com.google.samples.apps.iosched.ui.map.MapFragment;
import com.google.samples.apps.iosched.ui.map.MapFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.map.MapModule_ContributeMapFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.map.MapViewModel;
import com.google.samples.apps.iosched.ui.map.MapViewModel_Factory;
import com.google.samples.apps.iosched.ui.schedule.ScheduleFragment;
import com.google.samples.apps.iosched.ui.schedule.ScheduleFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.schedule.ScheduleModule_ContributeScheduleAgendaFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.schedule.ScheduleModule_ContributeScheduleDayFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.schedule.ScheduleModule_ContributeScheduleFilterFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.schedule.ScheduleModule_ContributeScheduleFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.schedule.ScheduleViewModel;
import com.google.samples.apps.iosched.ui.schedule.ScheduleViewModel_Factory;
import com.google.samples.apps.iosched.ui.schedule.agenda.ScheduleAgendaFragment;
import com.google.samples.apps.iosched.ui.schedule.agenda.ScheduleAgendaFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.schedule.day.ScheduleDayFragment;
import com.google.samples.apps.iosched.ui.schedule.day.ScheduleDayFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.schedule.filters.ScheduleFilterFragment;
import com.google.samples.apps.iosched.ui.schedule.filters.ScheduleFilterFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.sessiondetail.SessionDetailActivity;
import com.google.samples.apps.iosched.ui.sessiondetail.SessionDetailFragment;
import com.google.samples.apps.iosched.ui.sessiondetail.SessionDetailFragment_MembersInjector;
import com.google.samples.apps.iosched.ui.sessiondetail.SessionDetailModule_ContributeSessionDetailFragment$mobile_debug;
import com.google.samples.apps.iosched.ui.sessiondetail.SessionDetailModule_SessionDetailActivity$mobile_debug;
import com.google.samples.apps.iosched.ui.sessiondetail.SessionDetailViewModel;
import com.google.samples.apps.iosched.ui.sessiondetail.SessionDetailViewModel_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private Provider<MainModule_MainActivity$mobile_debug.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<
          SessionDetailModule_SessionDetailActivity$mobile_debug.SessionDetailActivitySubcomponent
              .Builder>
      sessionDetailActivitySubcomponentBuilderProvider;

  private Provider<
          SessionDetailModule_ContributeSessionDetailFragment$mobile_debug
              .SessionDetailFragmentSubcomponent.Builder>
      sessionDetailFragmentSubcomponentBuilderProvider;

  private Provider<SessionDataSource> provideSessionDataSourceProvider;

  private Provider<SessionRepository> sessionRepositoryProvider;

  private Provider<AgendaDataSource> provideAgendaDataSourceProvider;

  private Provider<AgendaRepository> agendaRepositoryProvider;

  private Provider<TagDataSource> provideTagDataSourceProvider;

  private Provider<TagRepository> tagRepositoryProvider;

  private Provider<MapMetadataDataSource> provideMapMetadataDataSourceProvider;

  private Provider<MapMetadataRepository> mapMetadataRepositoryProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return MapBuilder
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            newMapBuilder(2)
        .put(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider)
        .put(
            SessionDetailActivity.class,
            (Provider) sessionDetailActivitySubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  private DispatchingAndroidInjector<BroadcastReceiver>
      getDispatchingAndroidInjectorOfBroadcastReceiver() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends BroadcastReceiver>,
                Provider<AndroidInjector.Factory<? extends BroadcastReceiver>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<Service> getDispatchingAndroidInjectorOfService() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends Service>, Provider<AndroidInjector.Factory<? extends Service>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<ContentProvider>
      getDispatchingAndroidInjectorOfContentProvider() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends ContentProvider>,
                Provider<AndroidInjector.Factory<? extends ContentProvider>>>
                emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<MainModule_MainActivity$mobile_debug.MainActivitySubcomponent.Builder>() {
          @Override
          public MainModule_MainActivity$mobile_debug.MainActivitySubcomponent.Builder get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.sessionDetailActivitySubcomponentBuilderProvider =
        new Provider<
            SessionDetailModule_SessionDetailActivity$mobile_debug.SessionDetailActivitySubcomponent
                .Builder>() {
          @Override
          public SessionDetailModule_SessionDetailActivity$mobile_debug
                  .SessionDetailActivitySubcomponent.Builder
              get() {
            return new SessionDetailActivitySubcomponentBuilder();
          }
        };
    this.sessionDetailFragmentSubcomponentBuilderProvider =
        new Provider<
            SessionDetailModule_ContributeSessionDetailFragment$mobile_debug
                .SessionDetailFragmentSubcomponent.Builder>() {
          @Override
          public SessionDetailModule_ContributeSessionDetailFragment$mobile_debug
                  .SessionDetailFragmentSubcomponent.Builder
              get() {
            return new SessionDetailFragmentSubcomponentBuilder();
          }
        };
    this.provideSessionDataSourceProvider =
        DoubleCheck.provider(
            SharedModule_ProvideSessionDataSourceFactory.create(builder.sharedModule));
    this.sessionRepositoryProvider =
        DoubleCheck.provider(SessionRepository_Factory.create(provideSessionDataSourceProvider));
    this.provideAgendaDataSourceProvider =
        DoubleCheck.provider(
            SharedModule_ProvideAgendaDataSourceFactory.create(builder.sharedModule));
    this.agendaRepositoryProvider =
        DoubleCheck.provider(AgendaRepository_Factory.create(provideAgendaDataSourceProvider));
    this.provideTagDataSourceProvider =
        DoubleCheck.provider(SharedModule_ProvideTagDataSourceFactory.create(builder.sharedModule));
    this.tagRepositoryProvider =
        DoubleCheck.provider(TagRepository_Factory.create(provideTagDataSourceProvider));
    this.provideMapMetadataDataSourceProvider =
        DoubleCheck.provider(
            SharedModule_ProvideMapMetadataDataSourceFactory.create(builder.sharedModule));
    this.mapMetadataRepositoryProvider =
        DoubleCheck.provider(
            MapMetadataRepository_Factory.create(provideMapMetadataDataSourceProvider));
  }

  @Override
  public void inject(MainApplication arg0) {
    injectMainApplication(arg0);
  }

  private MainApplication injectMainApplication(MainApplication instance) {
    DaggerApplication_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    DaggerApplication_MembersInjector.injectBroadcastReceiverInjector(
        instance, getDispatchingAndroidInjectorOfBroadcastReceiver());
    DaggerApplication_MembersInjector.injectFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    DaggerApplication_MembersInjector.injectServiceInjector(
        instance, getDispatchingAndroidInjectorOfService());
    DaggerApplication_MembersInjector.injectContentProviderInjector(
        instance, getDispatchingAndroidInjectorOfContentProvider());
    DaggerApplication_MembersInjector.injectSetInjected(instance);
    return instance;
  }

  private static final class Builder extends AppComponent.Builder {
    private SharedModule sharedModule;

    private MainApplication seedInstance;

    @Override
    public AppComponent build() {
      if (sharedModule == null) {
        this.sharedModule = new SharedModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(MainApplication.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public void seedInstance(MainApplication arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends MainModule_MainActivity$mobile_debug.MainActivitySubcomponent.Builder {
    private MainActivity seedInstance;

    @Override
    public MainModule_MainActivity$mobile_debug.MainActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements MainModule_MainActivity$mobile_debug.MainActivitySubcomponent {
    private Provider<
            ScheduleModule_ContributeScheduleFragment$mobile_debug.ScheduleFragmentSubcomponent
                .Builder>
        scheduleFragmentSubcomponentBuilderProvider;

    private Provider<
            ScheduleModule_ContributeScheduleDayFragment$mobile_debug
                .ScheduleDayFragmentSubcomponent.Builder>
        scheduleDayFragmentSubcomponentBuilderProvider;

    private Provider<
            ScheduleModule_ContributeScheduleAgendaFragment$mobile_debug
                .ScheduleAgendaFragmentSubcomponent.Builder>
        scheduleAgendaFragmentSubcomponentBuilderProvider;

    private Provider<
            ScheduleModule_ContributeScheduleFilterFragment$mobile_debug
                .ScheduleFilterFragmentSubcomponent.Builder>
        scheduleFilterFragmentSubcomponentBuilderProvider;

    private Provider<MapModule_ContributeMapFragment$mobile_debug.MapFragmentSubcomponent.Builder>
        mapFragmentSubcomponentBuilderProvider;

    private Provider<
            InfoModule_ContributeInfoFragment$mobile_debug.InfoFragmentSubcomponent.Builder>
        infoFragmentSubcomponentBuilderProvider;

    private Provider<
            InfoModule_ContributeEventFragment$mobile_debug.EventFragmentSubcomponent.Builder>
        eventFragmentSubcomponentBuilderProvider;

    private Provider<
            InfoModule_ContributeTravelFragment$mobile_debug.TravelFragmentSubcomponent.Builder>
        travelFragmentSubcomponentBuilderProvider;

    private Provider<InfoModule_ContributeFaqFragment$mobile_debug.FaqFragmentSubcomponent.Builder>
        faqFragmentSubcomponentBuilderProvider;

    private Provider<
            InfoModule_ContributeSettingsFragment$mobile_debug.SettingsFragmentSubcomponent.Builder>
        settingsFragmentSubcomponentBuilderProvider;

    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<
            Class<? extends android.support.v4.app.Fragment>,
            Provider<AndroidInjector.Factory<? extends android.support.v4.app.Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends android.support.v4.app.Fragment>,
              Provider<AndroidInjector.Factory<? extends android.support.v4.app.Fragment>>>
              newMapBuilder(11)
          .put(
              SessionDetailFragment.class,
              (Provider) DaggerAppComponent.this.sessionDetailFragmentSubcomponentBuilderProvider)
          .put(ScheduleFragment.class, (Provider) scheduleFragmentSubcomponentBuilderProvider)
          .put(ScheduleDayFragment.class, (Provider) scheduleDayFragmentSubcomponentBuilderProvider)
          .put(
              ScheduleAgendaFragment.class,
              (Provider) scheduleAgendaFragmentSubcomponentBuilderProvider)
          .put(
              ScheduleFilterFragment.class,
              (Provider) scheduleFilterFragmentSubcomponentBuilderProvider)
          .put(MapFragment.class, (Provider) mapFragmentSubcomponentBuilderProvider)
          .put(InfoFragment.class, (Provider) infoFragmentSubcomponentBuilderProvider)
          .put(EventFragment.class, (Provider) eventFragmentSubcomponentBuilderProvider)
          .put(TravelFragment.class, (Provider) travelFragmentSubcomponentBuilderProvider)
          .put(FaqFragment.class, (Provider) faqFragmentSubcomponentBuilderProvider)
          .put(SettingsFragment.class, (Provider) settingsFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<android.support.v4.app.Fragment>
        getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivitySubcomponentBuilder builder) {
      this.scheduleFragmentSubcomponentBuilderProvider =
          new Provider<
              ScheduleModule_ContributeScheduleFragment$mobile_debug.ScheduleFragmentSubcomponent
                  .Builder>() {
            @Override
            public ScheduleModule_ContributeScheduleFragment$mobile_debug
                    .ScheduleFragmentSubcomponent.Builder
                get() {
              return new ScheduleFragmentSubcomponentBuilder();
            }
          };
      this.scheduleDayFragmentSubcomponentBuilderProvider =
          new Provider<
              ScheduleModule_ContributeScheduleDayFragment$mobile_debug
                  .ScheduleDayFragmentSubcomponent.Builder>() {
            @Override
            public ScheduleModule_ContributeScheduleDayFragment$mobile_debug
                    .ScheduleDayFragmentSubcomponent.Builder
                get() {
              return new ScheduleDayFragmentSubcomponentBuilder();
            }
          };
      this.scheduleAgendaFragmentSubcomponentBuilderProvider =
          new Provider<
              ScheduleModule_ContributeScheduleAgendaFragment$mobile_debug
                  .ScheduleAgendaFragmentSubcomponent.Builder>() {
            @Override
            public ScheduleModule_ContributeScheduleAgendaFragment$mobile_debug
                    .ScheduleAgendaFragmentSubcomponent.Builder
                get() {
              return new ScheduleAgendaFragmentSubcomponentBuilder();
            }
          };
      this.scheduleFilterFragmentSubcomponentBuilderProvider =
          new Provider<
              ScheduleModule_ContributeScheduleFilterFragment$mobile_debug
                  .ScheduleFilterFragmentSubcomponent.Builder>() {
            @Override
            public ScheduleModule_ContributeScheduleFilterFragment$mobile_debug
                    .ScheduleFilterFragmentSubcomponent.Builder
                get() {
              return new ScheduleFilterFragmentSubcomponentBuilder();
            }
          };
      this.mapFragmentSubcomponentBuilderProvider =
          new Provider<
              MapModule_ContributeMapFragment$mobile_debug.MapFragmentSubcomponent.Builder>() {
            @Override
            public MapModule_ContributeMapFragment$mobile_debug.MapFragmentSubcomponent.Builder
                get() {
              return new MapFragmentSubcomponentBuilder();
            }
          };
      this.infoFragmentSubcomponentBuilderProvider =
          new Provider<
              InfoModule_ContributeInfoFragment$mobile_debug.InfoFragmentSubcomponent.Builder>() {
            @Override
            public InfoModule_ContributeInfoFragment$mobile_debug.InfoFragmentSubcomponent.Builder
                get() {
              return new InfoFragmentSubcomponentBuilder();
            }
          };
      this.eventFragmentSubcomponentBuilderProvider =
          new Provider<
              InfoModule_ContributeEventFragment$mobile_debug.EventFragmentSubcomponent.Builder>() {
            @Override
            public InfoModule_ContributeEventFragment$mobile_debug.EventFragmentSubcomponent.Builder
                get() {
              return new EventFragmentSubcomponentBuilder();
            }
          };
      this.travelFragmentSubcomponentBuilderProvider =
          new Provider<
              InfoModule_ContributeTravelFragment$mobile_debug.TravelFragmentSubcomponent
                  .Builder>() {
            @Override
            public InfoModule_ContributeTravelFragment$mobile_debug.TravelFragmentSubcomponent
                    .Builder
                get() {
              return new TravelFragmentSubcomponentBuilder();
            }
          };
      this.faqFragmentSubcomponentBuilderProvider =
          new Provider<
              InfoModule_ContributeFaqFragment$mobile_debug.FaqFragmentSubcomponent.Builder>() {
            @Override
            public InfoModule_ContributeFaqFragment$mobile_debug.FaqFragmentSubcomponent.Builder
                get() {
              return new FaqFragmentSubcomponentBuilder();
            }
          };
      this.settingsFragmentSubcomponentBuilderProvider =
          new Provider<
              InfoModule_ContributeSettingsFragment$mobile_debug.SettingsFragmentSubcomponent
                  .Builder>() {
            @Override
            public InfoModule_ContributeSettingsFragment$mobile_debug.SettingsFragmentSubcomponent
                    .Builder
                get() {
              return new SettingsFragmentSubcomponentBuilder();
            }
          };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      return instance;
    }

    private final class ScheduleFragmentSubcomponentBuilder
        extends ScheduleModule_ContributeScheduleFragment$mobile_debug.ScheduleFragmentSubcomponent
            .Builder {
      private ScheduleFragment seedInstance;

      @Override
      public ScheduleModule_ContributeScheduleFragment$mobile_debug.ScheduleFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              ScheduleFragment.class.getCanonicalName() + " must be set");
        }
        return new ScheduleFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(ScheduleFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class ScheduleFragmentSubcomponentImpl
        implements ScheduleModule_ContributeScheduleFragment$mobile_debug
            .ScheduleFragmentSubcomponent {
      private LoadSessionUseCase_Factory loadSessionUseCaseProvider;

      private SessionDetailViewModel_Factory sessionDetailViewModelProvider;

      private LoadSessionsByDayUseCase_Factory loadSessionsByDayUseCaseProvider;

      private LoadAgendaUseCase_Factory loadAgendaUseCaseProvider;

      private LoadTagsByCategoryUseCase_Factory loadTagsByCategoryUseCaseProvider;

      private ScheduleViewModel_Factory scheduleViewModelProvider;

      private LoadConferenceLocationUseCase_Factory loadConferenceLocationUseCaseProvider;

      private LoadConferenceMinZoomUseCase_Factory loadConferenceMinZoomUseCaseProvider;

      private MapViewModel_Factory mapViewModelProvider;

      private ScheduleFragmentSubcomponentImpl(ScheduleFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(3)
            .put(SessionDetailViewModel.class, (Provider) sessionDetailViewModelProvider)
            .put(ScheduleViewModel.class, (Provider) scheduleViewModelProvider)
            .put(MapViewModel.class, (Provider) mapViewModelProvider)
            .build();
      }

      private IOSchedViewModelFactory getIOSchedViewModelFactory() {
        return new IOSchedViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final ScheduleFragmentSubcomponentBuilder builder) {
        this.loadSessionUseCaseProvider =
            LoadSessionUseCase_Factory.create(DaggerAppComponent.this.sessionRepositoryProvider);
        this.sessionDetailViewModelProvider =
            SessionDetailViewModel_Factory.create(loadSessionUseCaseProvider);
        this.loadSessionsByDayUseCaseProvider =
            LoadSessionsByDayUseCase_Factory.create(
                DaggerAppComponent.this.sessionRepositoryProvider);
        this.loadAgendaUseCaseProvider =
            LoadAgendaUseCase_Factory.create(DaggerAppComponent.this.agendaRepositoryProvider);
        this.loadTagsByCategoryUseCaseProvider =
            LoadTagsByCategoryUseCase_Factory.create(DaggerAppComponent.this.tagRepositoryProvider);
        this.scheduleViewModelProvider =
            ScheduleViewModel_Factory.create(
                loadSessionsByDayUseCaseProvider,
                loadAgendaUseCaseProvider,
                loadTagsByCategoryUseCaseProvider);
        this.loadConferenceLocationUseCaseProvider =
            LoadConferenceLocationUseCase_Factory.create(
                DaggerAppComponent.this.mapMetadataRepositoryProvider);
        this.loadConferenceMinZoomUseCaseProvider =
            LoadConferenceMinZoomUseCase_Factory.create(
                DaggerAppComponent.this.mapMetadataRepositoryProvider);
        this.mapViewModelProvider =
            MapViewModel_Factory.create(
                loadConferenceLocationUseCaseProvider, loadConferenceMinZoomUseCaseProvider);
      }

      @Override
      public void inject(ScheduleFragment arg0) {
        injectScheduleFragment(arg0);
      }

      private ScheduleFragment injectScheduleFragment(ScheduleFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        ScheduleFragment_MembersInjector.injectViewModelFactory(
            instance, getIOSchedViewModelFactory());
        return instance;
      }
    }

    private final class ScheduleDayFragmentSubcomponentBuilder
        extends ScheduleModule_ContributeScheduleDayFragment$mobile_debug
            .ScheduleDayFragmentSubcomponent.Builder {
      private ScheduleDayFragment seedInstance;

      @Override
      public ScheduleModule_ContributeScheduleDayFragment$mobile_debug
              .ScheduleDayFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              ScheduleDayFragment.class.getCanonicalName() + " must be set");
        }
        return new ScheduleDayFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(ScheduleDayFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class ScheduleDayFragmentSubcomponentImpl
        implements ScheduleModule_ContributeScheduleDayFragment$mobile_debug
            .ScheduleDayFragmentSubcomponent {
      private LoadSessionUseCase_Factory loadSessionUseCaseProvider;

      private SessionDetailViewModel_Factory sessionDetailViewModelProvider;

      private LoadSessionsByDayUseCase_Factory loadSessionsByDayUseCaseProvider;

      private LoadAgendaUseCase_Factory loadAgendaUseCaseProvider;

      private LoadTagsByCategoryUseCase_Factory loadTagsByCategoryUseCaseProvider;

      private ScheduleViewModel_Factory scheduleViewModelProvider;

      private LoadConferenceLocationUseCase_Factory loadConferenceLocationUseCaseProvider;

      private LoadConferenceMinZoomUseCase_Factory loadConferenceMinZoomUseCaseProvider;

      private MapViewModel_Factory mapViewModelProvider;

      private ScheduleDayFragmentSubcomponentImpl(ScheduleDayFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(3)
            .put(SessionDetailViewModel.class, (Provider) sessionDetailViewModelProvider)
            .put(ScheduleViewModel.class, (Provider) scheduleViewModelProvider)
            .put(MapViewModel.class, (Provider) mapViewModelProvider)
            .build();
      }

      private IOSchedViewModelFactory getIOSchedViewModelFactory() {
        return new IOSchedViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final ScheduleDayFragmentSubcomponentBuilder builder) {
        this.loadSessionUseCaseProvider =
            LoadSessionUseCase_Factory.create(DaggerAppComponent.this.sessionRepositoryProvider);
        this.sessionDetailViewModelProvider =
            SessionDetailViewModel_Factory.create(loadSessionUseCaseProvider);
        this.loadSessionsByDayUseCaseProvider =
            LoadSessionsByDayUseCase_Factory.create(
                DaggerAppComponent.this.sessionRepositoryProvider);
        this.loadAgendaUseCaseProvider =
            LoadAgendaUseCase_Factory.create(DaggerAppComponent.this.agendaRepositoryProvider);
        this.loadTagsByCategoryUseCaseProvider =
            LoadTagsByCategoryUseCase_Factory.create(DaggerAppComponent.this.tagRepositoryProvider);
        this.scheduleViewModelProvider =
            ScheduleViewModel_Factory.create(
                loadSessionsByDayUseCaseProvider,
                loadAgendaUseCaseProvider,
                loadTagsByCategoryUseCaseProvider);
        this.loadConferenceLocationUseCaseProvider =
            LoadConferenceLocationUseCase_Factory.create(
                DaggerAppComponent.this.mapMetadataRepositoryProvider);
        this.loadConferenceMinZoomUseCaseProvider =
            LoadConferenceMinZoomUseCase_Factory.create(
                DaggerAppComponent.this.mapMetadataRepositoryProvider);
        this.mapViewModelProvider =
            MapViewModel_Factory.create(
                loadConferenceLocationUseCaseProvider, loadConferenceMinZoomUseCaseProvider);
      }

      @Override
      public void inject(ScheduleDayFragment arg0) {
        injectScheduleDayFragment(arg0);
      }

      private ScheduleDayFragment injectScheduleDayFragment(ScheduleDayFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        ScheduleDayFragment_MembersInjector.injectViewModelFactory(
            instance, getIOSchedViewModelFactory());
        return instance;
      }
    }

    private final class ScheduleAgendaFragmentSubcomponentBuilder
        extends ScheduleModule_ContributeScheduleAgendaFragment$mobile_debug
            .ScheduleAgendaFragmentSubcomponent.Builder {
      private ScheduleAgendaFragment seedInstance;

      @Override
      public ScheduleModule_ContributeScheduleAgendaFragment$mobile_debug
              .ScheduleAgendaFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              ScheduleAgendaFragment.class.getCanonicalName() + " must be set");
        }
        return new ScheduleAgendaFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(ScheduleAgendaFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class ScheduleAgendaFragmentSubcomponentImpl
        implements ScheduleModule_ContributeScheduleAgendaFragment$mobile_debug
            .ScheduleAgendaFragmentSubcomponent {
      private LoadSessionUseCase_Factory loadSessionUseCaseProvider;

      private SessionDetailViewModel_Factory sessionDetailViewModelProvider;

      private LoadSessionsByDayUseCase_Factory loadSessionsByDayUseCaseProvider;

      private LoadAgendaUseCase_Factory loadAgendaUseCaseProvider;

      private LoadTagsByCategoryUseCase_Factory loadTagsByCategoryUseCaseProvider;

      private ScheduleViewModel_Factory scheduleViewModelProvider;

      private LoadConferenceLocationUseCase_Factory loadConferenceLocationUseCaseProvider;

      private LoadConferenceMinZoomUseCase_Factory loadConferenceMinZoomUseCaseProvider;

      private MapViewModel_Factory mapViewModelProvider;

      private ScheduleAgendaFragmentSubcomponentImpl(
          ScheduleAgendaFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(3)
            .put(SessionDetailViewModel.class, (Provider) sessionDetailViewModelProvider)
            .put(ScheduleViewModel.class, (Provider) scheduleViewModelProvider)
            .put(MapViewModel.class, (Provider) mapViewModelProvider)
            .build();
      }

      private IOSchedViewModelFactory getIOSchedViewModelFactory() {
        return new IOSchedViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final ScheduleAgendaFragmentSubcomponentBuilder builder) {
        this.loadSessionUseCaseProvider =
            LoadSessionUseCase_Factory.create(DaggerAppComponent.this.sessionRepositoryProvider);
        this.sessionDetailViewModelProvider =
            SessionDetailViewModel_Factory.create(loadSessionUseCaseProvider);
        this.loadSessionsByDayUseCaseProvider =
            LoadSessionsByDayUseCase_Factory.create(
                DaggerAppComponent.this.sessionRepositoryProvider);
        this.loadAgendaUseCaseProvider =
            LoadAgendaUseCase_Factory.create(DaggerAppComponent.this.agendaRepositoryProvider);
        this.loadTagsByCategoryUseCaseProvider =
            LoadTagsByCategoryUseCase_Factory.create(DaggerAppComponent.this.tagRepositoryProvider);
        this.scheduleViewModelProvider =
            ScheduleViewModel_Factory.create(
                loadSessionsByDayUseCaseProvider,
                loadAgendaUseCaseProvider,
                loadTagsByCategoryUseCaseProvider);
        this.loadConferenceLocationUseCaseProvider =
            LoadConferenceLocationUseCase_Factory.create(
                DaggerAppComponent.this.mapMetadataRepositoryProvider);
        this.loadConferenceMinZoomUseCaseProvider =
            LoadConferenceMinZoomUseCase_Factory.create(
                DaggerAppComponent.this.mapMetadataRepositoryProvider);
        this.mapViewModelProvider =
            MapViewModel_Factory.create(
                loadConferenceLocationUseCaseProvider, loadConferenceMinZoomUseCaseProvider);
      }

      @Override
      public void inject(ScheduleAgendaFragment arg0) {
        injectScheduleAgendaFragment(arg0);
      }

      private ScheduleAgendaFragment injectScheduleAgendaFragment(ScheduleAgendaFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        ScheduleAgendaFragment_MembersInjector.injectViewModelFactory(
            instance, getIOSchedViewModelFactory());
        return instance;
      }
    }

    private final class ScheduleFilterFragmentSubcomponentBuilder
        extends ScheduleModule_ContributeScheduleFilterFragment$mobile_debug
            .ScheduleFilterFragmentSubcomponent.Builder {
      private ScheduleFilterFragment seedInstance;

      @Override
      public ScheduleModule_ContributeScheduleFilterFragment$mobile_debug
              .ScheduleFilterFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              ScheduleFilterFragment.class.getCanonicalName() + " must be set");
        }
        return new ScheduleFilterFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(ScheduleFilterFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class ScheduleFilterFragmentSubcomponentImpl
        implements ScheduleModule_ContributeScheduleFilterFragment$mobile_debug
            .ScheduleFilterFragmentSubcomponent {
      private LoadSessionUseCase_Factory loadSessionUseCaseProvider;

      private SessionDetailViewModel_Factory sessionDetailViewModelProvider;

      private LoadSessionsByDayUseCase_Factory loadSessionsByDayUseCaseProvider;

      private LoadAgendaUseCase_Factory loadAgendaUseCaseProvider;

      private LoadTagsByCategoryUseCase_Factory loadTagsByCategoryUseCaseProvider;

      private ScheduleViewModel_Factory scheduleViewModelProvider;

      private LoadConferenceLocationUseCase_Factory loadConferenceLocationUseCaseProvider;

      private LoadConferenceMinZoomUseCase_Factory loadConferenceMinZoomUseCaseProvider;

      private MapViewModel_Factory mapViewModelProvider;

      private ScheduleFilterFragmentSubcomponentImpl(
          ScheduleFilterFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(3)
            .put(SessionDetailViewModel.class, (Provider) sessionDetailViewModelProvider)
            .put(ScheduleViewModel.class, (Provider) scheduleViewModelProvider)
            .put(MapViewModel.class, (Provider) mapViewModelProvider)
            .build();
      }

      private IOSchedViewModelFactory getIOSchedViewModelFactory() {
        return new IOSchedViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final ScheduleFilterFragmentSubcomponentBuilder builder) {
        this.loadSessionUseCaseProvider =
            LoadSessionUseCase_Factory.create(DaggerAppComponent.this.sessionRepositoryProvider);
        this.sessionDetailViewModelProvider =
            SessionDetailViewModel_Factory.create(loadSessionUseCaseProvider);
        this.loadSessionsByDayUseCaseProvider =
            LoadSessionsByDayUseCase_Factory.create(
                DaggerAppComponent.this.sessionRepositoryProvider);
        this.loadAgendaUseCaseProvider =
            LoadAgendaUseCase_Factory.create(DaggerAppComponent.this.agendaRepositoryProvider);
        this.loadTagsByCategoryUseCaseProvider =
            LoadTagsByCategoryUseCase_Factory.create(DaggerAppComponent.this.tagRepositoryProvider);
        this.scheduleViewModelProvider =
            ScheduleViewModel_Factory.create(
                loadSessionsByDayUseCaseProvider,
                loadAgendaUseCaseProvider,
                loadTagsByCategoryUseCaseProvider);
        this.loadConferenceLocationUseCaseProvider =
            LoadConferenceLocationUseCase_Factory.create(
                DaggerAppComponent.this.mapMetadataRepositoryProvider);
        this.loadConferenceMinZoomUseCaseProvider =
            LoadConferenceMinZoomUseCase_Factory.create(
                DaggerAppComponent.this.mapMetadataRepositoryProvider);
        this.mapViewModelProvider =
            MapViewModel_Factory.create(
                loadConferenceLocationUseCaseProvider, loadConferenceMinZoomUseCaseProvider);
      }

      @Override
      public void inject(ScheduleFilterFragment arg0) {
        injectScheduleFilterFragment(arg0);
      }

      private ScheduleFilterFragment injectScheduleFilterFragment(ScheduleFilterFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        ScheduleFilterFragment_MembersInjector.injectViewModelFactory(
            instance, getIOSchedViewModelFactory());
        return instance;
      }
    }

    private final class MapFragmentSubcomponentBuilder
        extends MapModule_ContributeMapFragment$mobile_debug.MapFragmentSubcomponent.Builder {
      private MapFragment seedInstance;

      @Override
      public MapModule_ContributeMapFragment$mobile_debug.MapFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(MapFragment.class.getCanonicalName() + " must be set");
        }
        return new MapFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(MapFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class MapFragmentSubcomponentImpl
        implements MapModule_ContributeMapFragment$mobile_debug.MapFragmentSubcomponent {
      private LoadSessionUseCase_Factory loadSessionUseCaseProvider;

      private SessionDetailViewModel_Factory sessionDetailViewModelProvider;

      private LoadSessionsByDayUseCase_Factory loadSessionsByDayUseCaseProvider;

      private LoadAgendaUseCase_Factory loadAgendaUseCaseProvider;

      private LoadTagsByCategoryUseCase_Factory loadTagsByCategoryUseCaseProvider;

      private ScheduleViewModel_Factory scheduleViewModelProvider;

      private LoadConferenceLocationUseCase_Factory loadConferenceLocationUseCaseProvider;

      private LoadConferenceMinZoomUseCase_Factory loadConferenceMinZoomUseCaseProvider;

      private MapViewModel_Factory mapViewModelProvider;

      private MapFragmentSubcomponentImpl(MapFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(3)
            .put(SessionDetailViewModel.class, (Provider) sessionDetailViewModelProvider)
            .put(ScheduleViewModel.class, (Provider) scheduleViewModelProvider)
            .put(MapViewModel.class, (Provider) mapViewModelProvider)
            .build();
      }

      private IOSchedViewModelFactory getIOSchedViewModelFactory() {
        return new IOSchedViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final MapFragmentSubcomponentBuilder builder) {
        this.loadSessionUseCaseProvider =
            LoadSessionUseCase_Factory.create(DaggerAppComponent.this.sessionRepositoryProvider);
        this.sessionDetailViewModelProvider =
            SessionDetailViewModel_Factory.create(loadSessionUseCaseProvider);
        this.loadSessionsByDayUseCaseProvider =
            LoadSessionsByDayUseCase_Factory.create(
                DaggerAppComponent.this.sessionRepositoryProvider);
        this.loadAgendaUseCaseProvider =
            LoadAgendaUseCase_Factory.create(DaggerAppComponent.this.agendaRepositoryProvider);
        this.loadTagsByCategoryUseCaseProvider =
            LoadTagsByCategoryUseCase_Factory.create(DaggerAppComponent.this.tagRepositoryProvider);
        this.scheduleViewModelProvider =
            ScheduleViewModel_Factory.create(
                loadSessionsByDayUseCaseProvider,
                loadAgendaUseCaseProvider,
                loadTagsByCategoryUseCaseProvider);
        this.loadConferenceLocationUseCaseProvider =
            LoadConferenceLocationUseCase_Factory.create(
                DaggerAppComponent.this.mapMetadataRepositoryProvider);
        this.loadConferenceMinZoomUseCaseProvider =
            LoadConferenceMinZoomUseCase_Factory.create(
                DaggerAppComponent.this.mapMetadataRepositoryProvider);
        this.mapViewModelProvider =
            MapViewModel_Factory.create(
                loadConferenceLocationUseCaseProvider, loadConferenceMinZoomUseCaseProvider);
      }

      @Override
      public void inject(MapFragment arg0) {
        injectMapFragment(arg0);
      }

      private MapFragment injectMapFragment(MapFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        MapFragment_MembersInjector.injectViewModelFactory(instance, getIOSchedViewModelFactory());
        return instance;
      }
    }

    private final class InfoFragmentSubcomponentBuilder
        extends InfoModule_ContributeInfoFragment$mobile_debug.InfoFragmentSubcomponent.Builder {
      private InfoFragment seedInstance;

      @Override
      public InfoModule_ContributeInfoFragment$mobile_debug.InfoFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(InfoFragment.class.getCanonicalName() + " must be set");
        }
        return new InfoFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(InfoFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class InfoFragmentSubcomponentImpl
        implements InfoModule_ContributeInfoFragment$mobile_debug.InfoFragmentSubcomponent {
      private InfoFragmentSubcomponentImpl(InfoFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(InfoFragment arg0) {
        injectInfoFragment(arg0);
      }

      private InfoFragment injectInfoFragment(InfoFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        return instance;
      }
    }

    private final class EventFragmentSubcomponentBuilder
        extends InfoModule_ContributeEventFragment$mobile_debug.EventFragmentSubcomponent.Builder {
      private EventFragment seedInstance;

      @Override
      public InfoModule_ContributeEventFragment$mobile_debug.EventFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(EventFragment.class.getCanonicalName() + " must be set");
        }
        return new EventFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(EventFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class EventFragmentSubcomponentImpl
        implements InfoModule_ContributeEventFragment$mobile_debug.EventFragmentSubcomponent {
      private EventFragmentSubcomponentImpl(EventFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(EventFragment arg0) {
        injectEventFragment(arg0);
      }

      private EventFragment injectEventFragment(EventFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        return instance;
      }
    }

    private final class TravelFragmentSubcomponentBuilder
        extends InfoModule_ContributeTravelFragment$mobile_debug.TravelFragmentSubcomponent
            .Builder {
      private TravelFragment seedInstance;

      @Override
      public InfoModule_ContributeTravelFragment$mobile_debug.TravelFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(TravelFragment.class.getCanonicalName() + " must be set");
        }
        return new TravelFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(TravelFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class TravelFragmentSubcomponentImpl
        implements InfoModule_ContributeTravelFragment$mobile_debug.TravelFragmentSubcomponent {
      private TravelFragmentSubcomponentImpl(TravelFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(TravelFragment arg0) {
        injectTravelFragment(arg0);
      }

      private TravelFragment injectTravelFragment(TravelFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        return instance;
      }
    }

    private final class FaqFragmentSubcomponentBuilder
        extends InfoModule_ContributeFaqFragment$mobile_debug.FaqFragmentSubcomponent.Builder {
      private FaqFragment seedInstance;

      @Override
      public InfoModule_ContributeFaqFragment$mobile_debug.FaqFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(FaqFragment.class.getCanonicalName() + " must be set");
        }
        return new FaqFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(FaqFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class FaqFragmentSubcomponentImpl
        implements InfoModule_ContributeFaqFragment$mobile_debug.FaqFragmentSubcomponent {
      private FaqFragmentSubcomponentImpl(FaqFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(FaqFragment arg0) {
        injectFaqFragment(arg0);
      }

      private FaqFragment injectFaqFragment(FaqFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        return instance;
      }
    }

    private final class SettingsFragmentSubcomponentBuilder
        extends InfoModule_ContributeSettingsFragment$mobile_debug.SettingsFragmentSubcomponent
            .Builder {
      private SettingsFragment seedInstance;

      @Override
      public InfoModule_ContributeSettingsFragment$mobile_debug.SettingsFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              SettingsFragment.class.getCanonicalName() + " must be set");
        }
        return new SettingsFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(SettingsFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class SettingsFragmentSubcomponentImpl
        implements InfoModule_ContributeSettingsFragment$mobile_debug.SettingsFragmentSubcomponent {
      private SettingsFragmentSubcomponentImpl(SettingsFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(SettingsFragment arg0) {
        injectSettingsFragment(arg0);
      }

      private SettingsFragment injectSettingsFragment(SettingsFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        return instance;
      }
    }
  }

  private final class SessionDetailActivitySubcomponentBuilder
      extends SessionDetailModule_SessionDetailActivity$mobile_debug
          .SessionDetailActivitySubcomponent.Builder {
    private SessionDetailActivity seedInstance;

    @Override
    public SessionDetailModule_SessionDetailActivity$mobile_debug.SessionDetailActivitySubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            SessionDetailActivity.class.getCanonicalName() + " must be set");
      }
      return new SessionDetailActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(SessionDetailActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class SessionDetailActivitySubcomponentImpl
      implements SessionDetailModule_SessionDetailActivity$mobile_debug
          .SessionDetailActivitySubcomponent {
    private SessionDetailActivitySubcomponentImpl(
        SessionDetailActivitySubcomponentBuilder builder) {}

    private Map<
            Class<? extends android.support.v4.app.Fragment>,
            Provider<AndroidInjector.Factory<? extends android.support.v4.app.Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return Collections
          .<Class<? extends android.support.v4.app.Fragment>,
              Provider<AndroidInjector.Factory<? extends android.support.v4.app.Fragment>>>
              singletonMap(
                  SessionDetailFragment.class,
                  (Provider)
                      DaggerAppComponent.this.sessionDetailFragmentSubcomponentBuilderProvider);
    }

    private DispatchingAndroidInjector<android.support.v4.app.Fragment>
        getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    @Override
    public void inject(SessionDetailActivity arg0) {
      injectSessionDetailActivity(arg0);
    }

    private SessionDetailActivity injectSessionDetailActivity(SessionDetailActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      return instance;
    }
  }

  private final class SessionDetailFragmentSubcomponentBuilder
      extends SessionDetailModule_ContributeSessionDetailFragment$mobile_debug
          .SessionDetailFragmentSubcomponent.Builder {
    private SessionDetailFragment seedInstance;

    @Override
    public SessionDetailModule_ContributeSessionDetailFragment$mobile_debug
            .SessionDetailFragmentSubcomponent
        build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            SessionDetailFragment.class.getCanonicalName() + " must be set");
      }
      return new SessionDetailFragmentSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(SessionDetailFragment arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class SessionDetailFragmentSubcomponentImpl
      implements SessionDetailModule_ContributeSessionDetailFragment$mobile_debug
          .SessionDetailFragmentSubcomponent {
    private LoadSessionUseCase_Factory loadSessionUseCaseProvider;

    private SessionDetailViewModel_Factory sessionDetailViewModelProvider;

    private SessionDetailFragmentSubcomponentImpl(
        SessionDetailFragmentSubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<
            Class<? extends android.support.v4.app.Fragment>,
            Provider<AndroidInjector.Factory<? extends android.support.v4.app.Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return Collections
          .<Class<? extends android.support.v4.app.Fragment>,
              Provider<AndroidInjector.Factory<? extends android.support.v4.app.Fragment>>>
              singletonMap(
                  SessionDetailFragment.class,
                  (Provider)
                      DaggerAppComponent.this.sessionDetailFragmentSubcomponentBuilderProvider);
    }

    private DispatchingAndroidInjector<android.support.v4.app.Fragment>
        getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>>
        getMapOfClassOfAndProviderOfViewModel() {
      return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(
          SessionDetailViewModel.class, (Provider) sessionDetailViewModelProvider);
    }

    private IOSchedViewModelFactory getIOSchedViewModelFactory() {
      return new IOSchedViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SessionDetailFragmentSubcomponentBuilder builder) {
      this.loadSessionUseCaseProvider =
          LoadSessionUseCase_Factory.create(DaggerAppComponent.this.sessionRepositoryProvider);
      this.sessionDetailViewModelProvider =
          SessionDetailViewModel_Factory.create(loadSessionUseCaseProvider);
    }

    @Override
    public void inject(SessionDetailFragment arg0) {
      injectSessionDetailFragment(arg0);
    }

    private SessionDetailFragment injectSessionDetailFragment(SessionDetailFragment instance) {
      DaggerFragment_MembersInjector.injectChildFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      SessionDetailFragment_MembersInjector.injectViewModelFactory(
          instance, getIOSchedViewModelFactory());
      return instance;
    }
  }
}
